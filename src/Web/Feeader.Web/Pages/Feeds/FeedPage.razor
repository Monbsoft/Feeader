@page "/feeds/{id:guid}"
@implements IDisposable
@inject FeedService FeedService
@inject ILogger<FeedPage> Logger

<MudText Typo="Typo.h3">Feed @_feed?.Name</MudText>
@if(_feed == null)
{

    <Loading/>
}
else
{
    <MudText Typo="Typo.overline">@_feed.Updated.Humanize()</MudText>
    <MudList>
    @foreach(var article in _feed.Articles)
    {
        <MudListItem>
        <MudCard>
            <MudCardContent>
                <MudText Typo="Typo.h5">@article.Title</MudText>
                <MudText Typo="Typo.body2">@article.Date.Humanize()</MudText>
                <MudText Typo="Typo.body1">@article.Description</MudText>
            </MudCardContent>
        </MudCard>
        </MudListItem>

    }
    </MudList>

}

@code {
    private CancellationTokenSource _cts = new();
    private Models.Feed? _feed;

    [Parameter]
    public Guid Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _feed = await FeedService.GetFeedAsync(Id, _cts.Token);

    }

    public void Dispose()
    {
        _cts.Cancel();
        _cts.Dispose();
    }
}

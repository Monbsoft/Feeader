@page "/feeds/{id:guid}"
@implements IDisposable
@inject FeedService FeedService
@inject ILogger<FeedPage> Logger

<MudText Typo="Typo.h3">Feed @_feed?.Name</MudText>
@if(_feed == null)
{

    <Loading/>
}
else
{
    
    <MudBreadcrumbs Items="_items" Separator=">"></MudBreadcrumbs>
    <ArticleList Articles="@_feed.Articles"/>

}

@code {
    private CancellationTokenSource _cts = new();
    private Models.Feed? _feed;   
    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Feeds", href: "/feeds"),
    };

    [Parameter]
    public Guid Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _feed = await FeedService.GetFeedAsync(Id, _cts.Token);
        _items.Add(new BreadcrumbItem(_feed.Name, href: null, disabled: true));
        Logger.LogInformation($"{_feed?.Articles?.Count} articles found");
    }

    public void Dispose()
    {
        _cts.Cancel();
        _cts.Dispose();
    }
}
